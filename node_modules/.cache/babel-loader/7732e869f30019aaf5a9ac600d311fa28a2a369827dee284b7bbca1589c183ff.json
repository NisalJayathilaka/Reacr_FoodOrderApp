{"ast":null,"code":"var _jsxFileName = \"/Users/nisaljayathilaka/reactjs/reactNew/foodOrderApp/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  // if(action.type === 'ADD'){\n  //     const updatedToatlAmount = state.totalAmount + action.item.price * action.item.amount;\n  //     const existingCartItemIndex = state.items.findIndex((item)=>{\n  //        return item.id === action.item.id\n  //     })\n  //     const existingCartItem  = state.items[existingCartItemIndex];\n\n  //     let updateItems;\n  //     if(existingCartItem){\n  //         const updatedItem = {\n  //             ...existingCartItem,\n  //             amount:existingCartItem.amount + action.item.amount\n  //         }\n  //         updateItems =[...state.items];\n  //         updateItems[existingCartItemIndex] = updatedItem\n  //     }else{\n\n  //         updateItems = state.items.concat(action.item);\n  //     }\n\n  //     return {\n  //         items:updateItems,\n  //         totalAmount: updatedToatlAmount\n  //     };\n  // }\n\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      item: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartAction","addItemCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["/Users/nisaljayathilaka/reactjs/reactNew/foodOrderApp/src/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState ={\n    items:[],\n    totalAmount:0\n}\nconst cartReducer = (state,action) => {\n   \n    // if(action.type === 'ADD'){\n    //     const updatedToatlAmount = state.totalAmount + action.item.price * action.item.amount;\n    //     const existingCartItemIndex = state.items.findIndex((item)=>{\n    //        return item.id === action.item.id\n    //     })\n    //     const existingCartItem  = state.items[existingCartItemIndex];\n        \n    //     let updateItems;\n    //     if(existingCartItem){\n    //         const updatedItem = {\n    //             ...existingCartItem,\n    //             amount:existingCartItem.amount + action.item.amount\n    //         }\n    //         updateItems =[...state.items];\n    //         updateItems[existingCartItemIndex] = updatedItem\n    //     }else{\n           \n    //         updateItems = state.items.concat(action.item);\n    //     }\n         \n    //     return {\n    //         items:updateItems,\n    //         totalAmount: updatedToatlAmount\n    //     };\n    // }\n\n    if (action.type === 'ADD') {\n        const updatedTotalAmount =\n          state.totalAmount + action.item.price * action.item.amount;\n    \n        const existingCartItemIndex = state.items.findIndex(\n          (item) => item.id === action.item.id\n        );\n        const existingCartItem = state.items[existingCartItemIndex];\n        let updatedItems;\n    \n        if (existingCartItem) {\n          const updatedItem = {\n            ...existingCartItem,\n            amount: existingCartItem.amount + action.item.amount,\n          };\n          updatedItems = [...state.items];\n          updatedItems[existingCartItemIndex] = updatedItem;\n        } else {\n          updatedItems = state.items.concat(action.item);\n        }\n    \n        return {\n          items: updatedItems,\n          totalAmount: updatedTotalAmount,\n        };\n      }\n    return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemCartHandler = (item) => {\n    dispatchCartAction({type:'ADD',item:item})\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({type:'REMOVE',item:id})\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,gBAAgB;AAAC;AAEzC,MAAMC,gBAAgB,GAAE;EACpBC,KAAK,EAAC,EAAE;EACRC,WAAW,EAAC;AAChB,CAAC;AACD,MAAMC,WAAW,GAAG,CAACC,KAAK,EAACC,MAAM,KAAK;EAElC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACvB,MAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACG,IAAI,CAACC,KAAK,GAAGJ,MAAM,CAACG,IAAI,CAACE,MAAM;IAE5D,MAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAK,CAACW,SAAS,CAChDJ,IAAI,IAAKA,IAAI,CAACK,EAAE,KAAKR,MAAM,CAACG,IAAI,CAACK,EAAE,CACrC;IACD,MAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAK,CAACU,qBAAqB,CAAC;IAC3D,IAAII,YAAY;IAEhB,IAAID,gBAAgB,EAAE;MACpB,MAAME,WAAW,GAAG;QAClB,GAAGF,gBAAgB;QACnBJ,MAAM,EAAEI,gBAAgB,CAACJ,MAAM,GAAGL,MAAM,CAACG,IAAI,CAACE;MAChD,CAAC;MACDK,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAK,CAAC;MAC/Bc,YAAY,CAACJ,qBAAqB,CAAC,GAAGK,WAAW;IACnD,CAAC,MAAM;MACLD,YAAY,GAAGX,KAAK,CAACH,KAAK,CAACgB,MAAM,CAACZ,MAAM,CAACG,IAAI,CAAC;IAChD;IAEA,OAAO;MACLP,KAAK,EAAEc,YAAY;MACnBb,WAAW,EAAEK;IACf,CAAC;EACH;EACF,OAAOP,gBAAgB;AAC3B,CAAC;AAED,MAAMkB,YAAY,GAAIC,KAAK,IAAK;EAAA;EAE9B,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGvB,UAAU,CAACK,WAAW,EAAEH,gBAAgB,CAAC;EAEjF,MAAMsB,kBAAkB,GAAId,IAAI,IAAK;IACnCa,kBAAkB,CAAC;MAACf,IAAI,EAAC,KAAK;MAACE,IAAI,EAACA;IAAI,CAAC,CAAC;EAC5C,CAAC;EACD,MAAMe,yBAAyB,GAAIV,EAAE,IAAK;IACxCQ,kBAAkB,CAAC;MAACf,IAAI,EAAC,QAAQ;MAACE,IAAI,EAACK;IAAE,CAAC,CAAC;EAC7C,CAAC;EAED,MAAMW,WAAW,GAAG;IAClBvB,KAAK,EAAEmB,SAAS,CAACnB,KAAK;IACtBC,WAAW,EAAEkB,SAAS,CAAClB,WAAW;IAClCuB,OAAO,EAAEH,kBAAkB;IAC3BI,UAAU,EAAEH;EACd,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEC,WAAY;IAAA,UACtCL,KAAK,CAACQ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAtBIT,YAAY;AAAA,KAAZA,YAAY;AAwBlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}